{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\nimport { elementAcceptingRef, HTMLElementType } from '@material-ui/utils';\nimport ownerDocument from '../utils/ownerDocument';\nimport Portal from '../Portal';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport zIndex from '../styles/zIndex';\nimport ModalManager, { ariaHidden } from './ModalManager';\nimport TrapFocus from '../Unstable_TrapFocus';\nimport SimpleBackdrop from './SimpleBackdrop';\n\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n\nfunction getHasTransition(props) {\n  return props.children ? props.children.props.hasOwnProperty('in') : false;\n} // A modal manager used to track and manage the state of open Modals.\n// Modals don't open on the server so this won't conflict with concurrent requests.\n\n\nconst defaultManager = new ModalManager();\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'fixed',\n    zIndex: theme.zIndex.modal,\n    right: 0,\n    bottom: 0,\n    top: 0,\n    left: 0\n  },\n\n  /* Styles applied to the root element if the `Modal` has exited. */\n  hidden: {\n    visibility: 'hidden'\n  }\n});\n/**\n * Modal is a lower-level construct that is leveraged by the following components:\n *\n * - [Dialog](/api/dialog/)\n * - [Drawer](/api/drawer/)\n * - [Menu](/api/menu/)\n * - [Popover](/api/popover/)\n *\n * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component\n * rather than directly using Modal.\n *\n * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).\n */\n\nconst Modal = /*#__PURE__*/React.forwardRef(function Modal(inProps, ref) {\n  const theme = useTheme();\n  const props = getThemeProps({\n    name: 'MuiModal',\n    props: _extends({}, inProps),\n    theme\n  });\n\n  const {\n    BackdropComponent = SimpleBackdrop,\n    BackdropProps,\n    children,\n    closeAfterTransition = false,\n    container,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableEscapeKeyDown = false,\n    disablePortal = false,\n    disableRestoreFocus = false,\n    disableScrollLock = false,\n    hideBackdrop = false,\n    keepMounted = false,\n    // private\n    // eslint-disable-next-line react/prop-types\n    manager = defaultManager,\n    onBackdropClick,\n    onClose,\n    onKeyDown,\n    open\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"BackdropComponent\", \"BackdropProps\", \"children\", \"closeAfterTransition\", \"container\", \"disableAutoFocus\", \"disableEnforceFocus\", \"disableEscapeKeyDown\", \"disablePortal\", \"disableRestoreFocus\", \"disableScrollLock\", \"hideBackdrop\", \"keepMounted\", \"manager\", \"onBackdropClick\", \"onClose\", \"onKeyDown\", \"open\"]);\n\n  const [exited, setExited] = React.useState(true);\n  const modal = React.useRef({});\n  const mountNodeRef = React.useRef(null);\n  const modalRef = React.useRef(null);\n  const handleRef = useForkRef(modalRef, ref);\n  const hasTransition = getHasTransition(props);\n\n  const getDoc = () => ownerDocument(mountNodeRef.current);\n\n  const getModal = () => {\n    modal.current.modalRef = modalRef.current;\n    modal.current.mountNode = mountNodeRef.current;\n    return modal.current;\n  };\n\n  const handleMounted = () => {\n    manager.mount(getModal(), {\n      disableScrollLock\n    }); // Fix a bug on Chrome where the scroll isn't initially 0.\n\n    modalRef.current.scrollTop = 0;\n  };\n\n  const handleOpen = useEventCallback(() => {\n    const resolvedContainer = getContainer(container) || getDoc().body;\n    manager.add(getModal(), resolvedContainer); // The element was already mounted.\n\n    if (modalRef.current) {\n      handleMounted();\n    }\n  });\n  const isTopModal = React.useCallback(() => manager.isTopModal(getModal()), [manager]);\n  const handlePortalRef = useEventCallback(node => {\n    mountNodeRef.current = node;\n\n    if (!node) {\n      return;\n    }\n\n    if (open && isTopModal()) {\n      handleMounted();\n    } else {\n      ariaHidden(modalRef.current, true);\n    }\n  });\n  const handleClose = React.useCallback(() => {\n    manager.remove(getModal());\n  }, [manager]);\n  React.useEffect(() => {\n    return () => {\n      handleClose();\n    };\n  }, [handleClose]);\n  React.useEffect(() => {\n    if (open) {\n      handleOpen();\n    } else if (!hasTransition || !closeAfterTransition) {\n      handleClose();\n    }\n  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);\n\n  if (!keepMounted && !open && (!hasTransition || exited)) {\n    return null;\n  }\n\n  const handleEnter = () => {\n    setExited(false);\n  };\n\n  const handleExited = () => {\n    setExited(true);\n\n    if (closeAfterTransition) {\n      handleClose();\n    }\n  };\n\n  const handleBackdropClick = event => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    if (onBackdropClick) {\n      onBackdropClick(event);\n    }\n\n    if (onClose) {\n      onClose(event, 'backdropClick');\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (onKeyDown) {\n      onKeyDown(event);\n    } // The handler doesn't take event.defaultPrevented into account:\n    //\n    // event.preventDefault() is meant to stop default behaviors like\n    // clicking a checkbox to check it, hitting a button to submit a form,\n    // and hitting left arrow to move the cursor in a text input etc.\n    // Only special HTML elements have these default behaviors.\n\n\n    if (event.key !== 'Escape' || !isTopModal()) {\n      return;\n    }\n\n    if (!disableEscapeKeyDown) {\n      // Swallow the event, in case someone is listening for the escape key on the body.\n      event.stopPropagation();\n\n      if (onClose) {\n        onClose(event, 'escapeKeyDown');\n      }\n    }\n  };\n\n  const inlineStyle = styles(theme || {\n    zIndex\n  });\n  const childProps = {};\n\n  if (children.props.tabIndex === undefined) {\n    childProps.tabIndex = children.props.tabIndex || '-1';\n  } // It's a Transition like component\n\n\n  if (hasTransition) {\n    childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);\n    childProps.onExited = createChainedFunction(handleExited, children.props.onExited);\n  }\n\n  return /*#__PURE__*/React.createElement(Portal, {\n    ref: handlePortalRef,\n    container: container,\n    disablePortal: disablePortal\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: handleRef,\n    onKeyDown: handleKeyDown,\n    role: \"presentation\"\n  }, other, {\n    style: _extends({}, inlineStyle.root, !open && exited ? inlineStyle.hidden : {}, other.style)\n  }), hideBackdrop ? null : /*#__PURE__*/React.createElement(BackdropComponent, _extends({\n    open: open,\n    onClick: handleBackdropClick\n  }, BackdropProps)), /*#__PURE__*/React.createElement(TrapFocus, {\n    disableEnforceFocus: disableEnforceFocus,\n    disableAutoFocus: disableAutoFocus,\n    disableRestoreFocus: disableRestoreFocus,\n    getDoc: getDoc,\n    isEnabled: isTopModal,\n    open: open\n  }, /*#__PURE__*/React.cloneElement(children, childProps))));\n});\nprocess.env.NODE_ENV !== \"production\" ? Modal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A backdrop component. This prop enables custom backdrop rendering.\n   * @default SimpleBackdrop\n   */\n  BackdropComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the [`Backdrop`](/api/backdrop/) element.\n   */\n  BackdropProps: PropTypes.object,\n\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * When set to true the Modal waits until a nested Transition is completed before closing.\n   * @default false\n   */\n  closeAfterTransition: PropTypes.bool,\n\n  /**\n   * A HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, hitting escape will not fire `onClose`.\n   * @default false\n   */\n  disableEscapeKeyDown: PropTypes.bool,\n\n  /**\n   * The `children` will be inside the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden.\n   * @default false\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Disable the scroll lock behavior.\n   * @default false\n   */\n  disableScrollLock: PropTypes.bool,\n\n  /**\n   * If `true`, the backdrop is not rendered.\n   * @default false\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Modal.\n   * @default false\n   */\n  keepMounted: PropTypes.bool,\n\n  /**\n   * Callback fired when the backdrop is clicked.\n   */\n  onBackdropClick: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * If `true`, the modal is open.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object\n} : void 0;\nexport default Modal;","map":{"version":3,"sources":["/home/shweta/GDEGame/node_modules/@material-ui/core/Modal/Modal.js"],"names":["_objectWithoutPropertiesLoose","_extends","React","PropTypes","getThemeProps","useTheme","elementAcceptingRef","HTMLElementType","ownerDocument","Portal","createChainedFunction","useForkRef","useEventCallback","zIndex","ModalManager","ariaHidden","TrapFocus","SimpleBackdrop","getContainer","container","getHasTransition","props","children","hasOwnProperty","defaultManager","styles","theme","root","position","modal","right","bottom","top","left","hidden","visibility","Modal","forwardRef","inProps","ref","name","BackdropComponent","BackdropProps","closeAfterTransition","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onKeyDown","open","other","exited","setExited","useState","useRef","mountNodeRef","modalRef","handleRef","hasTransition","getDoc","current","getModal","mountNode","handleMounted","mount","scrollTop","handleOpen","resolvedContainer","body","add","isTopModal","useCallback","handlePortalRef","node","handleClose","remove","useEffect","handleEnter","handleExited","handleBackdropClick","event","target","currentTarget","handleKeyDown","key","stopPropagation","inlineStyle","childProps","tabIndex","undefined","onEnter","onExited","createElement","role","style","onClick","isEnabled","cloneElement","process","env","NODE_ENV","propTypes","elementType","object","isRequired","bool","oneOfType","func"],"mappings":"AAAA,OAAOA,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,EAAwBC,QAAxB,QAAwC,qBAAxC;AACA,SAASC,mBAAT,EAA8BC,eAA9B,QAAqD,oBAArD;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,YAAP,IAAuBC,UAAvB,QAAyC,gBAAzC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,SAASC,YAAT,CAAsBC,SAAtB,EAAiC;AAC/B,SAAO,OAAOA,SAAP,KAAqB,UAArB,GAAkCA,SAAS,EAA3C,GAAgDA,SAAvD;AACD;;AAED,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,SAAOA,KAAK,CAACC,QAAN,GAAiBD,KAAK,CAACC,QAAN,CAAeD,KAAf,CAAqBE,cAArB,CAAoC,IAApC,CAAjB,GAA6D,KAApE;AACD,C,CAAC;AACF;;;AAGA,MAAMC,cAAc,GAAG,IAAIV,YAAJ,EAAvB;AACA,OAAO,MAAMW,MAAM,GAAGC,KAAK,KAAK;AAC9B;AACAC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,OADN;AAEJf,IAAAA,MAAM,EAAEa,KAAK,CAACb,MAAN,CAAagB,KAFjB;AAGJC,IAAAA,KAAK,EAAE,CAHH;AAIJC,IAAAA,MAAM,EAAE,CAJJ;AAKJC,IAAAA,GAAG,EAAE,CALD;AAMJC,IAAAA,IAAI,EAAE;AANF,GAFwB;;AAW9B;AACAC,EAAAA,MAAM,EAAE;AACNC,IAAAA,UAAU,EAAE;AADN;AAZsB,CAAL,CAApB;AAgBP;;;;;;;;;;;;;;AAcA,MAAMC,KAAK,GAAG,aAAalC,KAAK,CAACmC,UAAN,CAAiB,SAASD,KAAT,CAAeE,OAAf,EAAwBC,GAAxB,EAA6B;AACvE,QAAMb,KAAK,GAAGrB,QAAQ,EAAtB;AACA,QAAMgB,KAAK,GAAGjB,aAAa,CAAC;AAC1BoC,IAAAA,IAAI,EAAE,UADoB;AAE1BnB,IAAAA,KAAK,EAAEpB,QAAQ,CAAC,EAAD,EAAKqC,OAAL,CAFW;AAG1BZ,IAAAA;AAH0B,GAAD,CAA3B;;AAMA,QAAM;AACJe,IAAAA,iBAAiB,GAAGxB,cADhB;AAEJyB,IAAAA,aAFI;AAGJpB,IAAAA,QAHI;AAIJqB,IAAAA,oBAAoB,GAAG,KAJnB;AAKJxB,IAAAA,SALI;AAMJyB,IAAAA,gBAAgB,GAAG,KANf;AAOJC,IAAAA,mBAAmB,GAAG,KAPlB;AAQJC,IAAAA,oBAAoB,GAAG,KARnB;AASJC,IAAAA,aAAa,GAAG,KATZ;AAUJC,IAAAA,mBAAmB,GAAG,KAVlB;AAWJC,IAAAA,iBAAiB,GAAG,KAXhB;AAYJC,IAAAA,YAAY,GAAG,KAZX;AAaJC,IAAAA,WAAW,GAAG,KAbV;AAcJ;AACA;AACAC,IAAAA,OAAO,GAAG5B,cAhBN;AAiBJ6B,IAAAA,eAjBI;AAkBJC,IAAAA,OAlBI;AAmBJC,IAAAA,SAnBI;AAoBJC,IAAAA;AApBI,MAqBFnC,KArBJ;AAAA,QAsBMoC,KAAK,GAAGzD,6BAA6B,CAACqB,KAAD,EAAQ,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,UAAvC,EAAmD,sBAAnD,EAA2E,WAA3E,EAAwF,kBAAxF,EAA4G,qBAA5G,EAAmI,sBAAnI,EAA2J,eAA3J,EAA4K,qBAA5K,EAAmM,mBAAnM,EAAwN,cAAxN,EAAwO,aAAxO,EAAuP,SAAvP,EAAkQ,iBAAlQ,EAAqR,SAArR,EAAgS,WAAhS,EAA6S,MAA7S,CAAR,CAtB3C;;AAwBA,QAAM,CAACqC,MAAD,EAASC,SAAT,IAAsBzD,KAAK,CAAC0D,QAAN,CAAe,IAAf,CAA5B;AACA,QAAM/B,KAAK,GAAG3B,KAAK,CAAC2D,MAAN,CAAa,EAAb,CAAd;AACA,QAAMC,YAAY,GAAG5D,KAAK,CAAC2D,MAAN,CAAa,IAAb,CAArB;AACA,QAAME,QAAQ,GAAG7D,KAAK,CAAC2D,MAAN,CAAa,IAAb,CAAjB;AACA,QAAMG,SAAS,GAAGrD,UAAU,CAACoD,QAAD,EAAWxB,GAAX,CAA5B;AACA,QAAM0B,aAAa,GAAG7C,gBAAgB,CAACC,KAAD,CAAtC;;AAEA,QAAM6C,MAAM,GAAG,MAAM1D,aAAa,CAACsD,YAAY,CAACK,OAAd,CAAlC;;AAEA,QAAMC,QAAQ,GAAG,MAAM;AACrBvC,IAAAA,KAAK,CAACsC,OAAN,CAAcJ,QAAd,GAAyBA,QAAQ,CAACI,OAAlC;AACAtC,IAAAA,KAAK,CAACsC,OAAN,CAAcE,SAAd,GAA0BP,YAAY,CAACK,OAAvC;AACA,WAAOtC,KAAK,CAACsC,OAAb;AACD,GAJD;;AAMA,QAAMG,aAAa,GAAG,MAAM;AAC1BlB,IAAAA,OAAO,CAACmB,KAAR,CAAcH,QAAQ,EAAtB,EAA0B;AACxBnB,MAAAA;AADwB,KAA1B,EAD0B,CAGtB;;AAEJc,IAAAA,QAAQ,CAACI,OAAT,CAAiBK,SAAjB,GAA6B,CAA7B;AACD,GAND;;AAQA,QAAMC,UAAU,GAAG7D,gBAAgB,CAAC,MAAM;AACxC,UAAM8D,iBAAiB,GAAGxD,YAAY,CAACC,SAAD,CAAZ,IAA2B+C,MAAM,GAAGS,IAA9D;AACAvB,IAAAA,OAAO,CAACwB,GAAR,CAAYR,QAAQ,EAApB,EAAwBM,iBAAxB,EAFwC,CAEI;;AAE5C,QAAIX,QAAQ,CAACI,OAAb,EAAsB;AACpBG,MAAAA,aAAa;AACd;AACF,GAPkC,CAAnC;AAQA,QAAMO,UAAU,GAAG3E,KAAK,CAAC4E,WAAN,CAAkB,MAAM1B,OAAO,CAACyB,UAAR,CAAmBT,QAAQ,EAA3B,CAAxB,EAAwD,CAAChB,OAAD,CAAxD,CAAnB;AACA,QAAM2B,eAAe,GAAGnE,gBAAgB,CAACoE,IAAI,IAAI;AAC/ClB,IAAAA,YAAY,CAACK,OAAb,GAAuBa,IAAvB;;AAEA,QAAI,CAACA,IAAL,EAAW;AACT;AACD;;AAED,QAAIxB,IAAI,IAAIqB,UAAU,EAAtB,EAA0B;AACxBP,MAAAA,aAAa;AACd,KAFD,MAEO;AACLvD,MAAAA,UAAU,CAACgD,QAAQ,CAACI,OAAV,EAAmB,IAAnB,CAAV;AACD;AACF,GAZuC,CAAxC;AAaA,QAAMc,WAAW,GAAG/E,KAAK,CAAC4E,WAAN,CAAkB,MAAM;AAC1C1B,IAAAA,OAAO,CAAC8B,MAAR,CAAed,QAAQ,EAAvB;AACD,GAFmB,EAEjB,CAAChB,OAAD,CAFiB,CAApB;AAGAlD,EAAAA,KAAK,CAACiF,SAAN,CAAgB,MAAM;AACpB,WAAO,MAAM;AACXF,MAAAA,WAAW;AACZ,KAFD;AAGD,GAJD,EAIG,CAACA,WAAD,CAJH;AAKA/E,EAAAA,KAAK,CAACiF,SAAN,CAAgB,MAAM;AACpB,QAAI3B,IAAJ,EAAU;AACRiB,MAAAA,UAAU;AACX,KAFD,MAEO,IAAI,CAACR,aAAD,IAAkB,CAACtB,oBAAvB,EAA6C;AAClDsC,MAAAA,WAAW;AACZ;AACF,GAND,EAMG,CAACzB,IAAD,EAAOyB,WAAP,EAAoBhB,aAApB,EAAmCtB,oBAAnC,EAAyD8B,UAAzD,CANH;;AAQA,MAAI,CAACtB,WAAD,IAAgB,CAACK,IAAjB,KAA0B,CAACS,aAAD,IAAkBP,MAA5C,CAAJ,EAAyD;AACvD,WAAO,IAAP;AACD;;AAED,QAAM0B,WAAW,GAAG,MAAM;AACxBzB,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAFD;;AAIA,QAAM0B,YAAY,GAAG,MAAM;AACzB1B,IAAAA,SAAS,CAAC,IAAD,CAAT;;AAEA,QAAIhB,oBAAJ,EAA0B;AACxBsC,MAAAA,WAAW;AACZ;AACF,GAND;;AAQA,QAAMK,mBAAmB,GAAGC,KAAK,IAAI;AACnC,QAAIA,KAAK,CAACC,MAAN,KAAiBD,KAAK,CAACE,aAA3B,EAA0C;AACxC;AACD;;AAED,QAAIpC,eAAJ,EAAqB;AACnBA,MAAAA,eAAe,CAACkC,KAAD,CAAf;AACD;;AAED,QAAIjC,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAACiC,KAAD,EAAQ,eAAR,CAAP;AACD;AACF,GAZD;;AAcA,QAAMG,aAAa,GAAGH,KAAK,IAAI;AAC7B,QAAIhC,SAAJ,EAAe;AACbA,MAAAA,SAAS,CAACgC,KAAD,CAAT;AACD,KAH4B,CAG3B;AACF;AACA;AACA;AACA;AACA;;;AAGA,QAAIA,KAAK,CAACI,GAAN,KAAc,QAAd,IAA0B,CAACd,UAAU,EAAzC,EAA6C;AAC3C;AACD;;AAED,QAAI,CAAC/B,oBAAL,EAA2B;AACzB;AACAyC,MAAAA,KAAK,CAACK,eAAN;;AAEA,UAAItC,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACiC,KAAD,EAAQ,eAAR,CAAP;AACD;AACF;AACF,GAvBD;;AAyBA,QAAMM,WAAW,GAAGpE,MAAM,CAACC,KAAK,IAAI;AAClCb,IAAAA;AADkC,GAAV,CAA1B;AAGA,QAAMiF,UAAU,GAAG,EAAnB;;AAEA,MAAIxE,QAAQ,CAACD,KAAT,CAAe0E,QAAf,KAA4BC,SAAhC,EAA2C;AACzCF,IAAAA,UAAU,CAACC,QAAX,GAAsBzE,QAAQ,CAACD,KAAT,CAAe0E,QAAf,IAA2B,IAAjD;AACD,GA3JsE,CA2JrE;;;AAGF,MAAI9B,aAAJ,EAAmB;AACjB6B,IAAAA,UAAU,CAACG,OAAX,GAAqBvF,qBAAqB,CAAC0E,WAAD,EAAc9D,QAAQ,CAACD,KAAT,CAAe4E,OAA7B,CAA1C;AACAH,IAAAA,UAAU,CAACI,QAAX,GAAsBxF,qBAAqB,CAAC2E,YAAD,EAAe/D,QAAQ,CAACD,KAAT,CAAe6E,QAA9B,CAA3C;AACD;;AAED,SAAO,aAAahG,KAAK,CAACiG,aAAN,CAAoB1F,MAApB,EAA4B;AAC9C8B,IAAAA,GAAG,EAAEwC,eADyC;AAE9C5D,IAAAA,SAAS,EAAEA,SAFmC;AAG9C4B,IAAAA,aAAa,EAAEA;AAH+B,GAA5B,EAIjB,aAAa7C,KAAK,CAACiG,aAAN,CAAoB,KAApB,EAA2BlG,QAAQ,CAAC;AAClDsC,IAAAA,GAAG,EAAEyB,SAD6C;AAElDT,IAAAA,SAAS,EAAEmC,aAFuC;AAGlDU,IAAAA,IAAI,EAAE;AAH4C,GAAD,EAIhD3C,KAJgD,EAIzC;AACR4C,IAAAA,KAAK,EAAEpG,QAAQ,CAAC,EAAD,EAAK4F,WAAW,CAAClE,IAAjB,EAAuB,CAAC6B,IAAD,IAASE,MAAT,GAAkBmC,WAAW,CAAC3D,MAA9B,GAAuC,EAA9D,EAAkEuB,KAAK,CAAC4C,KAAxE;AADP,GAJyC,CAAnC,EAMZnD,YAAY,GAAG,IAAH,GAAU,aAAahD,KAAK,CAACiG,aAAN,CAAoB1D,iBAApB,EAAuCxC,QAAQ,CAAC;AACrFuD,IAAAA,IAAI,EAAEA,IAD+E;AAErF8C,IAAAA,OAAO,EAAEhB;AAF4E,GAAD,EAGnF5C,aAHmF,CAA/C,CANvB,EASI,aAAaxC,KAAK,CAACiG,aAAN,CAAoBnF,SAApB,EAA+B;AAC9D6B,IAAAA,mBAAmB,EAAEA,mBADyC;AAE9DD,IAAAA,gBAAgB,EAAEA,gBAF4C;AAG9DI,IAAAA,mBAAmB,EAAEA,mBAHyC;AAI9DkB,IAAAA,MAAM,EAAEA,MAJsD;AAK9DqC,IAAAA,SAAS,EAAE1B,UALmD;AAM9DrB,IAAAA,IAAI,EAAEA;AANwD,GAA/B,EAO9B,aAAatD,KAAK,CAACsG,YAAN,CAAmBlF,QAAnB,EAA6BwE,UAA7B,CAPiB,CATjB,CAJI,CAApB;AAqBD,CAxL0B,CAA3B;AAyLAW,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCvE,KAAK,CAACwE,SAAN,GAAkB;AACxD;AACA;AACA;AACA;;AAEA;;;;AAIAnE,EAAAA,iBAAiB,EAAEtC,SAAS,CAAC0G,WAV2B;;AAYxD;;;AAGAnE,EAAAA,aAAa,EAAEvC,SAAS,CAAC2G,MAf+B;;AAiBxD;;;AAGAxF,EAAAA,QAAQ,EAAEhB,mBAAmB,CAACyG,UApB0B;;AAsBxD;;;;AAIApE,EAAAA,oBAAoB,EAAExC,SAAS,CAAC6G,IA1BwB;;AA4BxD;;;;;;;AAOA7F,EAAAA,SAAS,EAAEhB;AACX;AADoB,GAEnB8G,SAFU,CAEA,CAAC1G,eAAD,EAAkBJ,SAAS,CAAC+G,IAA5B,CAFA,CAnC6C;;AAuCxD;;;;;;;;;AASAtE,EAAAA,gBAAgB,EAAEzC,SAAS,CAAC6G,IAhD4B;;AAkDxD;;;;;;;AAOAnE,EAAAA,mBAAmB,EAAE1C,SAAS,CAAC6G,IAzDyB;;AA2DxD;;;;AAIAlE,EAAAA,oBAAoB,EAAE3C,SAAS,CAAC6G,IA/DwB;;AAiExD;;;;AAIAjE,EAAAA,aAAa,EAAE5C,SAAS,CAAC6G,IArE+B;;AAuExD;;;;;AAKAhE,EAAAA,mBAAmB,EAAE7C,SAAS,CAAC6G,IA5EyB;;AA8ExD;;;;AAIA/D,EAAAA,iBAAiB,EAAE9C,SAAS,CAAC6G,IAlF2B;;AAoFxD;;;;AAIA9D,EAAAA,YAAY,EAAE/C,SAAS,CAAC6G,IAxFgC;;AA0FxD;;;;;;AAMA7D,EAAAA,WAAW,EAAEhD,SAAS,CAAC6G,IAhGiC;;AAkGxD;;;AAGA3D,EAAAA,eAAe,EAAElD,SAAS,CAAC+G,IArG6B;;AAuGxD;;;;;;;AAOA5D,EAAAA,OAAO,EAAEnD,SAAS,CAAC+G,IA9GqC;;AAgHxD;;;AAGA3D,EAAAA,SAAS,EAAEpD,SAAS,CAAC+G,IAnHmC;;AAqHxD;;;AAGA1D,EAAAA,IAAI,EAAErD,SAAS,CAAC6G,IAAV,CAAeD,UAxHmC;;AA0HxD;;;AAGAV,EAAAA,KAAK,EAAElG,SAAS,CAAC2G;AA7HuC,CAA1D,GA8HI,KAAK,CA9HT;AA+HA,eAAe1E,KAAf","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\nimport { elementAcceptingRef, HTMLElementType } from '@material-ui/utils';\nimport ownerDocument from '../utils/ownerDocument';\nimport Portal from '../Portal';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport zIndex from '../styles/zIndex';\nimport ModalManager, { ariaHidden } from './ModalManager';\nimport TrapFocus from '../Unstable_TrapFocus';\nimport SimpleBackdrop from './SimpleBackdrop';\n\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n\nfunction getHasTransition(props) {\n  return props.children ? props.children.props.hasOwnProperty('in') : false;\n} // A modal manager used to track and manage the state of open Modals.\n// Modals don't open on the server so this won't conflict with concurrent requests.\n\n\nconst defaultManager = new ModalManager();\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    position: 'fixed',\n    zIndex: theme.zIndex.modal,\n    right: 0,\n    bottom: 0,\n    top: 0,\n    left: 0\n  },\n\n  /* Styles applied to the root element if the `Modal` has exited. */\n  hidden: {\n    visibility: 'hidden'\n  }\n});\n/**\n * Modal is a lower-level construct that is leveraged by the following components:\n *\n * - [Dialog](/api/dialog/)\n * - [Drawer](/api/drawer/)\n * - [Menu](/api/menu/)\n * - [Popover](/api/popover/)\n *\n * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component\n * rather than directly using Modal.\n *\n * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).\n */\n\nconst Modal = /*#__PURE__*/React.forwardRef(function Modal(inProps, ref) {\n  const theme = useTheme();\n  const props = getThemeProps({\n    name: 'MuiModal',\n    props: _extends({}, inProps),\n    theme\n  });\n\n  const {\n    BackdropComponent = SimpleBackdrop,\n    BackdropProps,\n    children,\n    closeAfterTransition = false,\n    container,\n    disableAutoFocus = false,\n    disableEnforceFocus = false,\n    disableEscapeKeyDown = false,\n    disablePortal = false,\n    disableRestoreFocus = false,\n    disableScrollLock = false,\n    hideBackdrop = false,\n    keepMounted = false,\n    // private\n    // eslint-disable-next-line react/prop-types\n    manager = defaultManager,\n    onBackdropClick,\n    onClose,\n    onKeyDown,\n    open\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"BackdropComponent\", \"BackdropProps\", \"children\", \"closeAfterTransition\", \"container\", \"disableAutoFocus\", \"disableEnforceFocus\", \"disableEscapeKeyDown\", \"disablePortal\", \"disableRestoreFocus\", \"disableScrollLock\", \"hideBackdrop\", \"keepMounted\", \"manager\", \"onBackdropClick\", \"onClose\", \"onKeyDown\", \"open\"]);\n\n  const [exited, setExited] = React.useState(true);\n  const modal = React.useRef({});\n  const mountNodeRef = React.useRef(null);\n  const modalRef = React.useRef(null);\n  const handleRef = useForkRef(modalRef, ref);\n  const hasTransition = getHasTransition(props);\n\n  const getDoc = () => ownerDocument(mountNodeRef.current);\n\n  const getModal = () => {\n    modal.current.modalRef = modalRef.current;\n    modal.current.mountNode = mountNodeRef.current;\n    return modal.current;\n  };\n\n  const handleMounted = () => {\n    manager.mount(getModal(), {\n      disableScrollLock\n    }); // Fix a bug on Chrome where the scroll isn't initially 0.\n\n    modalRef.current.scrollTop = 0;\n  };\n\n  const handleOpen = useEventCallback(() => {\n    const resolvedContainer = getContainer(container) || getDoc().body;\n    manager.add(getModal(), resolvedContainer); // The element was already mounted.\n\n    if (modalRef.current) {\n      handleMounted();\n    }\n  });\n  const isTopModal = React.useCallback(() => manager.isTopModal(getModal()), [manager]);\n  const handlePortalRef = useEventCallback(node => {\n    mountNodeRef.current = node;\n\n    if (!node) {\n      return;\n    }\n\n    if (open && isTopModal()) {\n      handleMounted();\n    } else {\n      ariaHidden(modalRef.current, true);\n    }\n  });\n  const handleClose = React.useCallback(() => {\n    manager.remove(getModal());\n  }, [manager]);\n  React.useEffect(() => {\n    return () => {\n      handleClose();\n    };\n  }, [handleClose]);\n  React.useEffect(() => {\n    if (open) {\n      handleOpen();\n    } else if (!hasTransition || !closeAfterTransition) {\n      handleClose();\n    }\n  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);\n\n  if (!keepMounted && !open && (!hasTransition || exited)) {\n    return null;\n  }\n\n  const handleEnter = () => {\n    setExited(false);\n  };\n\n  const handleExited = () => {\n    setExited(true);\n\n    if (closeAfterTransition) {\n      handleClose();\n    }\n  };\n\n  const handleBackdropClick = event => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    if (onBackdropClick) {\n      onBackdropClick(event);\n    }\n\n    if (onClose) {\n      onClose(event, 'backdropClick');\n    }\n  };\n\n  const handleKeyDown = event => {\n    if (onKeyDown) {\n      onKeyDown(event);\n    } // The handler doesn't take event.defaultPrevented into account:\n    //\n    // event.preventDefault() is meant to stop default behaviors like\n    // clicking a checkbox to check it, hitting a button to submit a form,\n    // and hitting left arrow to move the cursor in a text input etc.\n    // Only special HTML elements have these default behaviors.\n\n\n    if (event.key !== 'Escape' || !isTopModal()) {\n      return;\n    }\n\n    if (!disableEscapeKeyDown) {\n      // Swallow the event, in case someone is listening for the escape key on the body.\n      event.stopPropagation();\n\n      if (onClose) {\n        onClose(event, 'escapeKeyDown');\n      }\n    }\n  };\n\n  const inlineStyle = styles(theme || {\n    zIndex\n  });\n  const childProps = {};\n\n  if (children.props.tabIndex === undefined) {\n    childProps.tabIndex = children.props.tabIndex || '-1';\n  } // It's a Transition like component\n\n\n  if (hasTransition) {\n    childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);\n    childProps.onExited = createChainedFunction(handleExited, children.props.onExited);\n  }\n\n  return /*#__PURE__*/React.createElement(Portal, {\n    ref: handlePortalRef,\n    container: container,\n    disablePortal: disablePortal\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: handleRef,\n    onKeyDown: handleKeyDown,\n    role: \"presentation\"\n  }, other, {\n    style: _extends({}, inlineStyle.root, !open && exited ? inlineStyle.hidden : {}, other.style)\n  }), hideBackdrop ? null : /*#__PURE__*/React.createElement(BackdropComponent, _extends({\n    open: open,\n    onClick: handleBackdropClick\n  }, BackdropProps)), /*#__PURE__*/React.createElement(TrapFocus, {\n    disableEnforceFocus: disableEnforceFocus,\n    disableAutoFocus: disableAutoFocus,\n    disableRestoreFocus: disableRestoreFocus,\n    getDoc: getDoc,\n    isEnabled: isTopModal,\n    open: open\n  }, /*#__PURE__*/React.cloneElement(children, childProps))));\n});\nprocess.env.NODE_ENV !== \"production\" ? Modal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A backdrop component. This prop enables custom backdrop rendering.\n   * @default SimpleBackdrop\n   */\n  BackdropComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the [`Backdrop`](/api/backdrop/) element.\n   */\n  BackdropProps: PropTypes.object,\n\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * When set to true the Modal waits until a nested Transition is completed before closing.\n   * @default false\n   */\n  closeAfterTransition: PropTypes.bool,\n\n  /**\n   * A HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\n   * If `true`, hitting escape will not fire `onClose`.\n   * @default false\n   */\n  disableEscapeKeyDown: PropTypes.bool,\n\n  /**\n   * The `children` will be inside the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden.\n   * @default false\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\n   * Disable the scroll lock behavior.\n   * @default false\n   */\n  disableScrollLock: PropTypes.bool,\n\n  /**\n   * If `true`, the backdrop is not rendered.\n   * @default false\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Modal.\n   * @default false\n   */\n  keepMounted: PropTypes.bool,\n\n  /**\n   * Callback fired when the backdrop is clicked.\n   */\n  onBackdropClick: PropTypes.func,\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * If `true`, the modal is open.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object\n} : void 0;\nexport default Modal;"]},"metadata":{},"sourceType":"module"}