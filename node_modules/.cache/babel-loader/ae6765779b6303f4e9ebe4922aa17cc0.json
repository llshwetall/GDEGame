{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '../styles';\nimport { alpha } from '../styles/colorManipulator';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nexport { createFilterOptions };\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    '&$focused $clearIndicator': {\n      visibility: 'visible'\n    },\n\n    /* Avoid double tap issue on iOS */\n    '@media (pointer: fine)': {\n      '&:hover $clearIndicator': {\n        visibility: 'visible'\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  },\n\n  /* Pseudo-class applied to the root element if focused. */\n  focused: {},\n\n  /* Styles applied to the tag elements, e.g. the chips. */\n  tag: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n\n  /* Styles applied to the tag elements, e.g. the chips if `size=\"small\"`. */\n  tagSizeSmall: {\n    margin: 2,\n    maxWidth: 'calc(100% - 4px)'\n  },\n\n  /* Styles applied when the popup icon is rendered. */\n  hasPopupIcon: {},\n\n  /* Styles applied when the clear icon is rendered. */\n  hasClearIcon: {},\n\n  /* Styles applied to the Input element. */\n  inputRoot: {\n    flexWrap: 'wrap',\n    '$hasPopupIcon &, $hasClearIcon &': {\n      paddingRight: 26 + 4\n    },\n    '$hasPopupIcon$hasClearIcon &': {\n      paddingRight: 52 + 4\n    },\n    '& $input': {\n      width: 0,\n      minWidth: 30\n    },\n    '&[class*=\"MuiInput-root\"]': {\n      paddingBottom: 1,\n      '& $input': {\n        padding: 4\n      },\n      '& $input:first-child': {\n        padding: '6px 0'\n      }\n    },\n    '&[class*=\"MuiInput-root\"][class*=\"MuiInput-marginDense\"]': {\n      '& $input': {\n        padding: '2px 4px 3px'\n      },\n      '& $input:first-child': {\n        padding: '1px 0 4px'\n      }\n    },\n    '&[class*=\"MuiOutlinedInput-root\"]': {\n      padding: 9,\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4 + 9\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4 + 9\n      },\n      '& $input': {\n        padding: '7.5px 4px'\n      },\n      '& $input:first-child': {\n        paddingLeft: 6\n      },\n      '& $endAdornment': {\n        right: 9\n      }\n    },\n    '&[class*=\"MuiOutlinedInput-root\"][class*=\"MuiOutlinedInput-marginDense\"]': {\n      padding: 6,\n      '& $input': {\n        padding: '2.5px 4px'\n      }\n    },\n    '&[class*=\"MuiFilledInput-root\"]': {\n      paddingTop: 19,\n      paddingLeft: 8,\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4 + 9\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4 + 9\n      },\n      '& $input': {\n        padding: '7px 4px'\n      },\n      '& $endAdornment': {\n        right: 9\n      }\n    },\n    '&[class*=\"MuiFilledInput-root\"][class*=\"MuiFilledInput-marginDense\"]': {\n      paddingBottom: 1,\n      '& $input': {\n        padding: '2.5px 4px'\n      }\n    }\n  },\n\n  /* Styles applied to the input element. */\n  input: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n\n  /* Styles applied to the input element if tag focused. */\n  inputFocused: {\n    opacity: 1\n  },\n\n  /* Styles applied to the endAdornment element. */\n  endAdornment: {\n    // We use a position absolute to support wrapping tags.\n    position: 'absolute',\n    right: 0,\n    top: 'calc(50% - 14px)' // Center vertically\n\n  },\n\n  /* Styles applied to the clear indicator. */\n  clearIndicator: {\n    marginRight: -2,\n    padding: 4,\n    visibility: 'hidden'\n  },\n\n  /* Styles applied to the popup indicator. */\n  popupIndicator: {\n    padding: 2,\n    marginRight: -2\n  },\n\n  /* Styles applied to the popup indicator if the popup is open. */\n  popupIndicatorOpen: {\n    transform: 'rotate(180deg)'\n  },\n\n  /* Styles applied to the popper element. */\n  popper: {\n    zIndex: theme.zIndex.modal\n  },\n\n  /* Styles applied to the popper element if `disablePortal={true}`. */\n  popperDisablePortal: {\n    position: 'absolute'\n  },\n\n  /* Styles applied to the `Paper` component. */\n  paper: _extends({}, theme.typography.body1, {\n    overflow: 'auto',\n    margin: '4px 0'\n  }),\n\n  /* Styles applied to the `listbox` component. */\n  listbox: {\n    listStyle: 'none',\n    margin: 0,\n    padding: '8px 0',\n    maxHeight: '40vh',\n    overflow: 'auto'\n  },\n\n  /* Styles applied to the loading wrapper. */\n  loading: {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  },\n\n  /* Styles applied to the no option wrapper. */\n  noOptions: {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  },\n\n  /* Styles applied to the option elements. */\n  option: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    '&[data-focus=\"true\"]': {\n      backgroundColor: theme.palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    '&.Mui-focusVisible': {\n      backgroundColor: theme.palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      '&[data-focus=\"true\"]': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.action.selected\n        }\n      },\n      '&.Mui-focusVisible': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  },\n\n  /* Styles applied to the group's label elements. */\n  groupLabel: {\n    backgroundColor: theme.palette.background.paper,\n    top: -8\n  },\n\n  /* Styles applied to the group's ul elements. */\n  groupUl: {\n    padding: 0,\n    '& $option': {\n      paddingLeft: 24\n    }\n  }\n});\n\nvar _ref = /*#__PURE__*/React.createElement(ClearIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(ArrowDropDownIcon, null);\n\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    classes,\n    className,\n    clearIcon = _ref,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionLabel = option => {\n      var _option$label;\n\n      return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    includeInputInList = false,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loadingâ€¦',\n    multiple = false,\n    noOptionsText = 'No options',\n    openOnFocus = false,\n    openText = 'Open',\n    PaperComponent = Paper,\n    PopperComponent = Popper,\n    popupIcon = _ref2,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"classes\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: clsx(classes.tag, size === 'small' && classes.tagSizeSmall),\n      disabled\n    }, getTagProps(params));\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/React.createElement(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/React.createElement(\"span\", {\n        className: classes.tag,\n        key: startAdornment.length\n      }, getLimitTagsText(more)));\n    }\n  }\n\n  const defaultRenderGroup = params => /*#__PURE__*/React.createElement(\"li\", {\n    key: params.key\n  }, /*#__PURE__*/React.createElement(ListSubheader, {\n    className: classes.groupLabel,\n    component: \"div\"\n  }, params.group), /*#__PURE__*/React.createElement(\"ul\", {\n    className: classes.groupUl\n  }, params.children));\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/React.createElement(\"li\", props2, getOptionLabel(option));\n\n  const renderOption = renderOptionProp || defaultRenderOption;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      inputValue\n    });\n  };\n\n  const hasClearIcon = !disableClearable && !disabled && dirty;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused, fullWidth && classes.fullWidth, hasClearIcon && classes.hasClearIcon, hasPopupIcon && classes.hasPopupIcon)\n  }, getRootProps(other)), renderInput({\n    id,\n    disabled,\n    fullWidth: true,\n    size: size === 'small' ? 'small' : undefined,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      ref: setAnchorEl,\n      className: classes.inputRoot,\n      startAdornment,\n      endAdornment: /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.endAdornment\n      }, hasClearIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getClearProps(), {\n        \"aria-label\": clearText,\n        title: clearText,\n        className: classes.clearIndicator\n      }), clearIcon) : null, hasPopupIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        \"aria-label\": popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), popupIcon) : null)\n    },\n    inputProps: _extends({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled\n    }, getInputProps())\n  })), popupOpen && anchorEl ? /*#__PURE__*/React.createElement(PopperComponent, {\n    className: clsx(classes.popper, disablePortal && classes.popperDisablePortal),\n    disablePortal: disablePortal,\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: true\n  }, /*#__PURE__*/React.createElement(PaperComponent, {\n    className: classes.paper\n  }, loading && groupedOptions.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? /*#__PURE__*/React.createElement(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps(), ListboxProps), groupedOptions.map((option, index) => {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        group: option.group,\n        children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume his search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The default input value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the input is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * The `Popper` content will be inside the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine if an option is selected, considering the current value.\n   * Uses strict equality by default.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: PropTypes.number,\n\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Loadingâ€¦'\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"remove-option\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the autocomplete.\n   * @default 'medium'\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);","map":{"version":3,"sources":["/home/shweta/GDEGame/node_modules/@material-ui/core/Autocomplete/Autocomplete.js"],"names":["_objectWithoutPropertiesLoose","_extends","React","PropTypes","clsx","withStyles","alpha","Popper","ListSubheader","Paper","IconButton","Chip","ClearIcon","ArrowDropDownIcon","useAutocomplete","createFilterOptions","styles","theme","root","visibility","fullWidth","width","focused","tag","margin","maxWidth","tagSizeSmall","hasPopupIcon","hasClearIcon","inputRoot","flexWrap","paddingRight","minWidth","paddingBottom","padding","paddingLeft","right","paddingTop","input","flexGrow","textOverflow","opacity","inputFocused","endAdornment","position","top","clearIndicator","marginRight","popupIndicator","popupIndicatorOpen","transform","popper","zIndex","modal","popperDisablePortal","paper","typography","body1","overflow","listbox","listStyle","maxHeight","loading","color","palette","text","secondary","noOptions","option","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","focus","primary","main","selectedOpacity","hoverOpacity","selected","focusOpacity","groupLabel","background","groupUl","_ref","createElement","fontSize","_ref2","Autocomplete","forwardRef","props","ref","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","classes","className","clearIcon","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","disablePortal","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionLabel","_option$label","label","groupBy","handleHomeEndKeys","includeInputInList","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","openOnFocus","openText","PaperComponent","PopperComponent","popupIcon","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","size","other","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","value","dirty","id","popupOpen","focusedTag","anchorEl","setAnchorEl","inputValue","groupedOptions","componentName","startAdornment","length","getCustomizedTagProps","params","map","index","Array","isArray","splice","push","key","defaultRenderGroup","component","group","children","defaultRenderOption","props2","renderListOption","optionProps","Fragment","undefined","InputLabelProps","InputProps","title","inputProps","style","clientWidth","role","open","options","option2","index2","process","env","NODE_ENV","propTypes","bool","oneOfType","oneOf","object","string","node","any","filterOptions","func","getOptionDisabled","getOptionSelected","number","elementType","onChange","onClose","onHighlightChange","onInputChange","onOpen","array","isRequired","name"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '../styles';\nimport { alpha } from '../styles/colorManipulator';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nexport { createFilterOptions };\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    '&$focused $clearIndicator': {\n      visibility: 'visible'\n    },\n\n    /* Avoid double tap issue on iOS */\n    '@media (pointer: fine)': {\n      '&:hover $clearIndicator': {\n        visibility: 'visible'\n      }\n    }\n  },\n\n  /* Styles applied to the root element if `fullWidth={true}`. */\n  fullWidth: {\n    width: '100%'\n  },\n\n  /* Pseudo-class applied to the root element if focused. */\n  focused: {},\n\n  /* Styles applied to the tag elements, e.g. the chips. */\n  tag: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)'\n  },\n\n  /* Styles applied to the tag elements, e.g. the chips if `size=\"small\"`. */\n  tagSizeSmall: {\n    margin: 2,\n    maxWidth: 'calc(100% - 4px)'\n  },\n\n  /* Styles applied when the popup icon is rendered. */\n  hasPopupIcon: {},\n\n  /* Styles applied when the clear icon is rendered. */\n  hasClearIcon: {},\n\n  /* Styles applied to the Input element. */\n  inputRoot: {\n    flexWrap: 'wrap',\n    '$hasPopupIcon &, $hasClearIcon &': {\n      paddingRight: 26 + 4\n    },\n    '$hasPopupIcon$hasClearIcon &': {\n      paddingRight: 52 + 4\n    },\n    '& $input': {\n      width: 0,\n      minWidth: 30\n    },\n    '&[class*=\"MuiInput-root\"]': {\n      paddingBottom: 1,\n      '& $input': {\n        padding: 4\n      },\n      '& $input:first-child': {\n        padding: '6px 0'\n      }\n    },\n    '&[class*=\"MuiInput-root\"][class*=\"MuiInput-marginDense\"]': {\n      '& $input': {\n        padding: '2px 4px 3px'\n      },\n      '& $input:first-child': {\n        padding: '1px 0 4px'\n      }\n    },\n    '&[class*=\"MuiOutlinedInput-root\"]': {\n      padding: 9,\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4 + 9\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4 + 9\n      },\n      '& $input': {\n        padding: '7.5px 4px'\n      },\n      '& $input:first-child': {\n        paddingLeft: 6\n      },\n      '& $endAdornment': {\n        right: 9\n      }\n    },\n    '&[class*=\"MuiOutlinedInput-root\"][class*=\"MuiOutlinedInput-marginDense\"]': {\n      padding: 6,\n      '& $input': {\n        padding: '2.5px 4px'\n      }\n    },\n    '&[class*=\"MuiFilledInput-root\"]': {\n      paddingTop: 19,\n      paddingLeft: 8,\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4 + 9\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4 + 9\n      },\n      '& $input': {\n        padding: '7px 4px'\n      },\n      '& $endAdornment': {\n        right: 9\n      }\n    },\n    '&[class*=\"MuiFilledInput-root\"][class*=\"MuiFilledInput-marginDense\"]': {\n      paddingBottom: 1,\n      '& $input': {\n        padding: '2.5px 4px'\n      }\n    }\n  },\n\n  /* Styles applied to the input element. */\n  input: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0\n  },\n\n  /* Styles applied to the input element if tag focused. */\n  inputFocused: {\n    opacity: 1\n  },\n\n  /* Styles applied to the endAdornment element. */\n  endAdornment: {\n    // We use a position absolute to support wrapping tags.\n    position: 'absolute',\n    right: 0,\n    top: 'calc(50% - 14px)' // Center vertically\n\n  },\n\n  /* Styles applied to the clear indicator. */\n  clearIndicator: {\n    marginRight: -2,\n    padding: 4,\n    visibility: 'hidden'\n  },\n\n  /* Styles applied to the popup indicator. */\n  popupIndicator: {\n    padding: 2,\n    marginRight: -2\n  },\n\n  /* Styles applied to the popup indicator if the popup is open. */\n  popupIndicatorOpen: {\n    transform: 'rotate(180deg)'\n  },\n\n  /* Styles applied to the popper element. */\n  popper: {\n    zIndex: theme.zIndex.modal\n  },\n\n  /* Styles applied to the popper element if `disablePortal={true}`. */\n  popperDisablePortal: {\n    position: 'absolute'\n  },\n\n  /* Styles applied to the `Paper` component. */\n  paper: _extends({}, theme.typography.body1, {\n    overflow: 'auto',\n    margin: '4px 0'\n  }),\n\n  /* Styles applied to the `listbox` component. */\n  listbox: {\n    listStyle: 'none',\n    margin: 0,\n    padding: '8px 0',\n    maxHeight: '40vh',\n    overflow: 'auto'\n  },\n\n  /* Styles applied to the loading wrapper. */\n  loading: {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  },\n\n  /* Styles applied to the no option wrapper. */\n  noOptions: {\n    color: theme.palette.text.secondary,\n    padding: '14px 16px'\n  },\n\n  /* Styles applied to the option elements. */\n  option: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    '&[data-focus=\"true\"]': {\n      backgroundColor: theme.palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    '&.Mui-focusVisible': {\n      backgroundColor: theme.palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      '&[data-focus=\"true\"]': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.palette.action.selected\n        }\n      },\n      '&.Mui-focusVisible': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  },\n\n  /* Styles applied to the group's label elements. */\n  groupLabel: {\n    backgroundColor: theme.palette.background.paper,\n    top: -8\n  },\n\n  /* Styles applied to the group's ul elements. */\n  groupUl: {\n    padding: 0,\n    '& $option': {\n      paddingLeft: 24\n    }\n  }\n});\n\nvar _ref = /*#__PURE__*/React.createElement(ClearIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(ArrowDropDownIcon, null);\n\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    classes,\n    className,\n    clearIcon = _ref,\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionLabel = option => {\n      var _option$label;\n\n      return (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option;\n    },\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    includeInputInList = false,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loadingâ€¦',\n    multiple = false,\n    noOptionsText = 'No options',\n    openOnFocus = false,\n    openText = 'Open',\n    PaperComponent = Paper,\n    PopperComponent = Popper,\n    popupIcon = _ref2,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"classes\", \"className\", \"clearIcon\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeText\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  }));\n  let startAdornment;\n\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => _extends({\n      className: clsx(classes.tag, size === 'small' && classes.tagSizeSmall),\n      disabled\n    }, getTagProps(params));\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/React.createElement(Chip, _extends({\n        label: getOptionLabel(option),\n        size: size\n      }, getCustomizedTagProps({\n        index\n      }), ChipProps)));\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/React.createElement(\"span\", {\n        className: classes.tag,\n        key: startAdornment.length\n      }, getLimitTagsText(more)));\n    }\n  }\n\n  const defaultRenderGroup = params => /*#__PURE__*/React.createElement(\"li\", {\n    key: params.key\n  }, /*#__PURE__*/React.createElement(ListSubheader, {\n    className: classes.groupLabel,\n    component: \"div\"\n  }, params.group), /*#__PURE__*/React.createElement(\"ul\", {\n    className: classes.groupUl\n  }, params.children));\n\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/React.createElement(\"li\", props2, getOptionLabel(option));\n\n  const renderOption = renderOptionProp || defaultRenderOption;\n\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption(_extends({}, optionProps, {\n      className: classes.option\n    }), option, {\n      selected: optionProps['aria-selected'],\n      inputValue\n    });\n  };\n\n  const hasClearIcon = !disableClearable && !disabled && dirty;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused, fullWidth && classes.fullWidth, hasClearIcon && classes.hasClearIcon, hasPopupIcon && classes.hasPopupIcon)\n  }, getRootProps(other)), renderInput({\n    id,\n    disabled,\n    fullWidth: true,\n    size: size === 'small' ? 'small' : undefined,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      ref: setAnchorEl,\n      className: classes.inputRoot,\n      startAdornment,\n      endAdornment: /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.endAdornment\n      }, hasClearIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getClearProps(), {\n        \"aria-label\": clearText,\n        title: clearText,\n        className: classes.clearIndicator\n      }), clearIcon) : null, hasPopupIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        \"aria-label\": popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), popupIcon) : null)\n    },\n    inputProps: _extends({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled\n    }, getInputProps())\n  })), popupOpen && anchorEl ? /*#__PURE__*/React.createElement(PopperComponent, {\n    className: clsx(classes.popper, disablePortal && classes.popperDisablePortal),\n    disablePortal: disablePortal,\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: true\n  }, /*#__PURE__*/React.createElement(PaperComponent, {\n    className: classes.paper\n  }, loading && groupedOptions.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? /*#__PURE__*/React.createElement(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps(), ListboxProps), groupedOptions.map((option, index) => {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        group: option.group,\n        children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\n   * Props applied to the [`Chip`](/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume his search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The default input value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the input is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\n   * The `Popper` content will be inside the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine if an option is selected, considering the current value.\n   * Uses strict equality by default.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: PropTypes.number,\n\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\n   * If `true`, the component is in a loading state.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Loadingâ€¦'\n   */\n  loadingText: PropTypes.node,\n\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"remove-option\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup` open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n\n  /**\n   * Render the group.\n   *\n   * @param {any} option The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\n   * The size of the autocomplete.\n   * @default 'medium'\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `getOptionSelected` prop.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);"]},"metadata":{},"sourceType":"module"}